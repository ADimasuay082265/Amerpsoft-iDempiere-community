AD_Org_ID[Name],AD_Package_Exp_ID[Name],Line,Type,AD_EntityType_ID[EntityType],AD_Menu_ID[Name],FileName,File_Directory,Target_Directory,Destination_FileName,Destination_Directory,AD_Table_ID[Name],DBType,SQLStatement,AD_Package_Code_Old,AD_Package_Code_New,AD_Form_ID[Name],AD_Process_ID[Value],AD_Workflow_ID[Value],AD_Window_ID[Name],AD_Workbench_ID[Name],AD_Role_ID[Name],AD_ReportView_ID[Name],AD_ImpFormat_ID[Name],AD_Val_Rule_ID[Name],AD_Message_ID[Value],AD_PrintFormat_ID[Name],ReleaseNo,Description,AD_Reference_ID[Name],AD_ModelValidator_ID[Name],AD_InfoWindow_ID[Name]
*,AMERPSOFT Financial,30,REF,,,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,C_Period Selection,,Product Info
*,AMERPSOFT Financial,40,REF,,,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,AMF_Year_ID,,Product Info
*,AMERPSOFT Financial,50,V,,,,,,,,,ALL,,,,,,,,,System Administrator,,,C_Period of Year,,,,,C_Period Selection,,Product Info
*,AMERPSOFT Financial,60,T,,,,,,,,Accounts Balances and Detail ID,ALL,,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,70,T,,,,,,,,AMF_AcctSchema_V C_AcctSchema View ,ALL,,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,80,REF,,,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,AMF_AcctSchema C_AcctSchema ,,Product Info
*,AMERPSOFT Financial,90,REF,,,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,C_Period (Open)  LAST FY2018,,Product Info
*,AMERPSOFT Financial,100,M,,AMERPSOFT Financial Processes,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,110,M,,AMERPSOFT Bank Reports,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,120,M,,AMERPSOFT Finantial Reports,,,,,,,ALL,,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,240,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_dow2letter(character, character, character)

-- DROP FUNCTION adempiere.amf_dow2letter(character, character, character);

CREATE OR REPLACE FUNCTION adempiere.amf_dow2letter(conv_dow character, upp_low character, languaje_iso character)
  RETURNS character varying AS
$BODY$

DECLARE
    letter_dow varchar(40);
    nullvalue varchar(20);
    notnullvalue varchar(30);
    
BEGIN
    nullvalue := '*** NULL ***';
    notnullvalue := '** NOT NULL *** ';
    languaje_iso := lower(languaje_iso);
    IF (conv_dow IS NULL) 
    THEN 
	letter_dow := nullvalue ;
    ELSEIF (conv_dow IS NOT NULL) 
    THEN
	-- SPANISH
	 case when languaje_iso = 'es' then 
		case when (conv_dow) ='0' then letter_dow := 'Domingo';
		     when (conv_dow) ='1' then letter_dow := 'Lunes'; 
		     when (conv_dow) ='2' then letter_dow := 'Martes'; 
		     when (conv_dow) ='3' then letter_dow := 'Miercoles';
		     when (conv_dow) ='4' then letter_dow := 'Jueves';
		     when (conv_dow) ='5' then letter_dow := 'Viernes'; 
		     when (conv_dow) ='6' then letter_dow := 'Sabado';
		     else letter_dow := ('Dia Invalido') ;
		end  case;
	-- ENGLISH
	      when languaje_iso = 'en' then 
		case when (conv_dow) ='0' then letter_dow := 'Sunday';
		     when (conv_dow) ='1' then letter_dow := 'Monday'; 
		     when (conv_dow) ='2' then letter_dow := 'Tuesday'; 
		     when (conv_dow) ='3' then letter_dow := 'Wednesday';
		     when (conv_dow) ='4' then letter_dow := 'Thursday';
		     when (conv_dow) ='5' then letter_dow := 'Friday'; 
		     when (conv_dow) ='6' then letter_dow := 'Saturday';
		     else letter_dow := ('Invalid Dow') ;
		end  case;		     
	-- DEFAULT SPANISH
	      else 
		case when (conv_dow) ='0' then letter_dow := 'Domingo';
		     when (conv_dow) ='1' then letter_dow := 'Lunes'; 
		     when (conv_dow) ='2' then letter_dow := 'Martes'; 
		     when (conv_dow) ='3' then letter_dow := 'Miercoles';
		     when (conv_dow) ='4' then letter_dow := 'Jueves';
		     when (conv_dow) ='5' then letter_dow := 'Viernes'; 
		     when (conv_dow) ='6' then letter_dow := 'Sabado';
		     else letter_dow := ('Dia Invalido') ;
		end  case;
	      
	 end case;

    END IF;
    if upper(upp_low) = 'U' then
	    letter_dow :=  upper(letter_dow);
    end if;
    if upper(upp_low) = 'L' then
	    letter_dow :=  lower(letter_dow);
    end if;
    RETURN (letter_dow);
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,250,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_dow2letter(character, character, character)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,260,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_fiscalstartdate(numeric, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_fiscalstartdate(numeric, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_fiscalstartdate(p_calendar_id numeric, p_acctdate timestamp without time zone)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_startDate		timestamp without time zone := null;
BEGIN

SELECT min(startdate) into v_startDate
FROM C_Period
where C_Year_ID in
(
SELECT p.c_year_id
FROM C_Period p
JOIN C_Year y on (p.c_year_id = y.c_year_id)
WHERE y.c_calendar_id = p_calendar_id
 AND p_acctdate BETWEEN TRUNC(p.StartDate) AND TRUNC(p.EndDate)
 AND p.IsActive='Y' 
 AND p.PeriodType='S'
)
;

RETURN	v_startDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,270,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_fiscalstartdate(numeric, timestamp without time zone)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,280,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_month2letter(character, character, character)

-- DROP FUNCTION adempiere.amf_month2letter(character, character, character);

CREATE OR REPLACE FUNCTION adempiere.amf_month2letter(conv_month character, upp_low character, languaje_iso character)
  RETURNS character varying AS
$BODY$

DECLARE
    letter_month varchar(40);
    nullvalue varchar(20);
    notnullvalue varchar(30);
    
BEGIN
    nullvalue := '*** NULL ***';
    notnullvalue := '** NOT NULL *** ';
    languaje_iso := lower(languaje_iso);
    IF (conv_month IS NULL) 
    THEN 
	letter_month := nullvalue ;
    ELSEIF (conv_month IS NOT NULL) 
    THEN
	-- SPANISH
	 case when languaje_iso = 'es' then 
		case when (conv_month) ='01' then letter_month := 'Enero';
		     when (conv_month) ='02' then letter_month := 'Febrero'; 
		     when (conv_month) ='03' then letter_month := 'Marzo'; 
		     when (conv_month) ='04' then letter_month := 'Abril';
		     when (conv_month) ='05' then letter_month := 'Mayo';
		     when (conv_month) ='06' then letter_month := 'Junio'; 
		     when (conv_month) ='07' then letter_month := 'Julio';
		     when (conv_month) ='08' then letter_month := 'Agosto';
		     when (conv_month) ='09' then letter_month := 'Septiembre'; 
		     when (conv_month) ='10' then letter_month := 'Octubre';
		     when (conv_month) ='11' then letter_month := 'Noviembre'; 
		     when (conv_month) ='12' then letter_month := 'Diciembre';
		     else letter_month := ('Invalid Month') ;
		end  case;
	-- ENGLISH
	      when languaje_iso = 'en' then 
		case when (conv_month) ='01' then letter_month := 'January';
		     when (conv_month) ='02' then letter_month := 'February'; 
		     when (conv_month) ='03' then letter_month := 'March'; 
		     when (conv_month) ='04' then letter_month := 'April';
		     when (conv_month) ='05' then letter_month := 'May';
		     when (conv_month) ='06' then letter_month := 'June'; 
		     when (conv_month) ='07' then letter_month := 'July';
		     when (conv_month) ='08' then letter_month := 'August';
		     when (conv_month) ='09' then letter_month := 'September'; 
		     when (conv_month) ='10' then letter_month := 'October';
		     when (conv_month) ='11' then letter_month := 'November'; 
		     when (conv_month) ='12' then letter_month := 'December';
		     else letter_month := ('Invalid Month') ;
		end  case;
	-- DEFAULT SPANISH
	      else 
		case when (conv_month) ='01' then letter_month := 'Enero';
		     when (conv_month) ='02' then letter_month := 'Febrero'; 
		     when (conv_month) ='03' then letter_month := 'Marzo'; 
		     when (conv_month) ='04' then letter_month := 'Abril';
		     when (conv_month) ='05' then letter_month := 'Mayo';
		     when (conv_month) ='06' then letter_month := 'Junio'; 
		     when (conv_month) ='07' then letter_month := 'Julio';
		     when (conv_month) ='08' then letter_month := 'Agosto';
		     when (conv_month) ='09' then letter_month := 'Septiembre'; 
		     when (conv_month) ='10' then letter_month := 'Octubre';
		     when (conv_month) ='11' then letter_month := 'Noviembre'; 
		     when (conv_month) ='12' then letter_month := 'Diciembre';
		     else letter_month := ('Invalid Month') ;
		end  case;
	      
	 end case;

    END IF;
    if upper(upp_low) = 'U' then
	    letter_month :=  upper(letter_month);
    end if;
    if upper(upp_low) = 'L' then
	    letter_month :=  lower(letter_month);
    end if;
    RETURN (letter_month);
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,290,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_month2letter(character, character, character)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,300,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_nextperiodenddate(numeric)

-- DROP FUNCTION adempiere.amf_nextperiodenddate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_nextperiodenddate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_nextendDate		timestamp without time zone := null;
BEGIN

SELECT enddate into v_nextendDate
FROM C_Period
where C_Period_ID = p_period_id
;

v_nextendDate := v_nextendDate + interval '1 months';
RETURN	v_nextendDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,310,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_nextperiodenddate(numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,320,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_nextperiodstartdate(numeric)

-- DROP FUNCTION adempiere.amf_nextperiodstartdate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_nextperiodstartdate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_prevstartDate		timestamp without time zone := null;
BEGIN

SELECT (startdate )  into v_prevstartDate
FROM C_Period
where C_Period_ID = p_period_id
;
v_prevstartDate := v_prevstartDate + interval '1 months';
RETURN	v_prevstartDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,330,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_nextperiodstartdate(numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,340,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_periodenddate(numeric)

-- DROP FUNCTION adempiere.amf_periodenddate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_periodenddate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_endDate		timestamp without time zone := null;
BEGIN

SELECT enddate into v_endDate
FROM C_Period
where C_Period_ID = p_period_id
;

RETURN	v_endDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,350,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_periodenddate(numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,360,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_periodstartdate(numeric)

-- DROP FUNCTION adempiere.amf_periodstartdate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_periodstartdate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_startDate		timestamp without time zone := null;
BEGIN

SELECT startdate into v_startDate
FROM C_Period
where C_Period_ID = p_period_id
;

RETURN	v_startDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,370,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_periodstartdate(numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,380,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_prevperiodenddate(numeric)

-- DROP FUNCTION adempiere.amf_prevperiodenddate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_prevperiodenddate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_endDate		timestamp without time zone := null;
BEGIN

SELECT (startdate - 1)  into v_endDate
FROM C_Period
where C_Period_ID = p_period_id
;

RETURN	v_endDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,390,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_prevperiodenddate(numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,400,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_prevperiodstartdate(numeric)

-- DROP FUNCTION adempiere.amf_prevperiodstartdate(numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_prevperiodstartdate(p_period_id numeric)
  RETURNS timestamp without time zone AS
$BODY$DECLARE
	v_year_id		numeric :=0;
	v_prevstartDate		timestamp without time zone := null;
BEGIN

SELECT (startdate )  into v_prevstartDate
FROM C_Period
where C_Period_ID = p_period_id
;
v_prevstartDate := v_prevstartDate - interval '1 months';
RETURN	v_prevstartDate;
END;	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,410,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_prevperiodstartdate(numeric)
  OWNER TO adempiere",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2140,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctper0prevbalance(numeric, numeric, numeric, numeric)

-- DROP FUNCTION adempiere.amf_acctper0prevbalance(numeric, numeric, numeric, numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_acctper0prevbalance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_period_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctprevbalance	numeric :=0;
	v_acctdebperiod	numeric :=0;
	v_acctcreperiod	numeric :=0;
BEGIN
		v_acctprevbalance := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id and fas.dateacct < amf_periodstartdate( p_period_id )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id and fas.dateacct < amf_periodstartdate( p_period_id )
			;
	    END IF;
		v_acctprevbalance := v_acctdebperiod-v_acctcreperiod;
    	RETURN  v_acctprevbalance;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2150,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctper0prevbalance(numeric, numeric, numeric, numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2160,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctper1deb(numeric, numeric, numeric, numeric)

-- DROP FUNCTION adempiere.amf_acctper1deb(numeric, numeric, numeric, numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_acctper1deb(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_period_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctdebperiod	numeric :=0;

BEGIN
		v_acctdebperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00)  INTO v_acctdebperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00)  INTO v_acctdebperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
	    END IF;
	   
    	RETURN  v_acctdebperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2170,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctper1deb(numeric, numeric, numeric, numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2180,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctper2cre(numeric, numeric, numeric, numeric)

-- DROP FUNCTION adempiere.amf_acctper2cre(numeric, numeric, numeric, numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_acctper2cre(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_period_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctcreperiod	numeric :=0;

BEGIN
		v_acctcreperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctcr),0.00)   INTO v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
	    END IF;
	   
    	RETURN  v_acctcreperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2190,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctper2cre(numeric, numeric, numeric, numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2200,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctper3balance(numeric, numeric, numeric, numeric)

-- DROP FUNCTION adempiere.amf_acctper3balance(numeric, numeric, numeric, numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_acctper3balance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_period_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctbalperiod	numeric :=0;
	v_acctdebperiod	numeric :=0;
	v_acctcreperiod	numeric :=0;
BEGIN
		v_acctbalperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >= amf_periodstartdate( p_period_id ) and fas.dateacct <= amf_periodenddate( p_period_id ) )
			;
	    END IF;
	   v_acctbalperiod:=v_acctdebperiod-v_acctcreperiod;
    	RETURN  v_acctbalperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2210,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctper3balance(numeric, numeric, numeric, numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2220,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctper4currentbalance(numeric, numeric, numeric, numeric)

-- DROP FUNCTION adempiere.amf_acctper4currentbalance(numeric, numeric, numeric, numeric);

CREATE OR REPLACE FUNCTION adempiere.amf_acctper4currentbalance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_period_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctcurrentbalance	numeric :=0;
	v_acctdebbalance	numeric :=0;
	v_acctcrebalance	numeric :=0;

BEGIN
		v_acctcurrentbalance := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebbalance,v_acctcrebalance
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id and fas.dateacct <= amf_periodenddate( p_period_id )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebbalance,v_acctcrebalance
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id and fas.dateacct <= amf_periodenddate( p_period_id )
			;
	    END IF;
	   v_acctcurrentbalance:=v_acctdebbalance - v_acctcrebalance;
    	RETURN  v_acctcurrentbalance;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,2230,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctper4currentbalance(numeric, numeric, numeric, numeric)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3040,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctdate0prevbalance(numeric, numeric, numeric, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_acctdate0prevbalance(numeric, numeric, numeric, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_acctdate0prevbalance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_beforedate timestamp without time zone)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctprevbalance	numeric :=0;
	v_acctdebperiod	numeric :=0;
	v_acctcreperiod	numeric :=0;
BEGIN
		v_acctprevbalance := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id and fas.dateacct <  p_beforedate 
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id and fas.dateacct <  p_beforedate 
			;
	    END IF;
		v_acctprevbalance := v_acctdebperiod-v_acctcreperiod;
    	RETURN  v_acctprevbalance;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3050,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctdate0prevbalance(numeric, numeric, numeric, timestamp without time zone)
  OWNER TO adempiere;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3060,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctdate1deb(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_acctdate1deb(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_acctdate1deb(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_startdate timestamp without time zone, p_enddate timestamp without time zone)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctdebperiod	numeric;
BEGIN
		v_acctdebperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00)  INTO v_acctdebperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00)  INTO v_acctdebperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
	    END IF;
	   
    	RETURN  v_acctdebperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3070,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctdate1deb(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)
  OWNER TO adempiere;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3080,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctdate2cre(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_acctdate2cre(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_acctdate2cre(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_startdate timestamp without time zone, p_enddate timestamp without time zone)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctcreperiod	numeric;

BEGIN
		v_acctcreperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctcr),0.00) INTO v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctcr),0.00) INTO v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
	    END IF;
	   
    	RETURN  v_acctcreperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3090,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctdate2cre(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3100,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctdate3balance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_acctdate3balance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_acctdate3balance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_startdate timestamp without time zone, p_enddate timestamp without time zone)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctbalperiod	numeric :=0;
	v_acctdebperiod	numeric :=0;
	v_acctcreperiod	numeric :=0;
BEGIN
		v_acctbalperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and (fas.dateacct >=  p_startdate and fas.dateacct <= p_enddate )
			;
	    END IF;
	   v_acctbalperiod:=v_acctdebperiod-v_acctcreperiod;
    	RETURN  v_acctbalperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3110,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctdate3balance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)
  OWNER TO adempiere;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3120,SQL,,,,,,,,,Postgres,"-- Function: adempiere.amf_acctdate4currentbalance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)

-- DROP FUNCTION adempiere.amf_acctdate4currentbalance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone);

CREATE OR REPLACE FUNCTION adempiere.amf_acctdate4currentbalance(p_client_id numeric, p_org_id numeric, p_account_id numeric, p_startdate timestamp without time zone, p_enddate timestamp without time zone)
  RETURNS numeric AS
$BODY$
DECLARE
	v_acctbalperiod	numeric :=0;
	v_acctdebperiod	numeric :=0;
	v_acctcreperiod	numeric :=0;
BEGIN
		v_acctbalperiod := 0;
	    IF (p_org_id > 0) THEN
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id and fas.ad_org_id=p_org_id and fas.account_id = p_account_id 	
				and fas.dateacct <= p_enddate
			;
		ELSE
			select 
				coalesce(sum(fas.amtacctdr),0.00),coalesce(sum(fas.amtacctcr),0.00)  INTO v_acctdebperiod,v_acctcreperiod
			FROM
				adempiere.fact_acct as fas
			WHERE
				fas.ad_client_id=p_client_id  and fas.account_id = p_account_id 
				and fas.dateacct <= p_enddate
			;
	    END IF;
	   v_acctbalperiod:=v_acctdebperiod-v_acctcreperiod;
    	RETURN  v_acctbalperiod;
END;

$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,3130,SQL,,,,,,,,,Postgres,"ALTER FUNCTION adempiere.amf_acctdate4currentbalance(numeric, numeric, numeric, timestamp without time zone, timestamp without time zone)
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,5010,SQL,,,,,,,,,Postgres,"DROP VIEW IF EXISTS adempiere.amf_accounts_balance_v;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,5020,SQL,,,,,,,,,Postgres,"DROP VIEW IF EXISTS adempiere.amf_accounts_detail_v;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,5030,SQL,,,,,,,,,Postgres,DROP VIEW IF EXISTS adempiere.amf_accounts_v;,,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6100,SQL,,,,,,,,,Postgres,"-- View: adempiere.amf_accounts_v
-- Change PeriodFrom to PeriodFrom_ID, PeriodTo to PeriodTo_ID
-- DROP VIEW IF EXISTS adempiere.amf_accounts_v;

CREATE OR REPLACE VIEW adempiere.amf_accounts_v AS 
 SELECT elv0.c_elementvalue_id + 1000::numeric * amf.amf_acctbaldetail_id AS amf_accounts_v_id, 
 amf.amf_acctbaldetail_id, amf.ad_client_id, amf.ad_org_id, amf.created, amf.createdby, amf.updated, amf.updatedby, amf.isactive, 
 amf.ref_org_id, 
 amf.periodfrom_id, 
 amf.periodto_id, 
 amf.accountfrom_id, 
 amf.dateacctfrom,
 amf.dateacctto,
 elv1.value AS accountfrom, 
 amf.accountto_id, 
 elv2.value AS accountto, 
 elv0.c_elementvalue_id, 
 elv0.value AS acctvalue, 
 elv0.name AS acctname, 
 COALESCE(elv0.description, ''::character varying) AS acctdescription, 
 COALESCE(elv0.name2, ''::bpchar) AS acctname2, 
 elv0.accountsign AS acctsign, 
 elv0.accounttype AS accttype, 
 elv0.isactive AS acctisactive
   FROM adempiere.amf_acctbaldetail amf
   LEFT JOIN adempiere.c_element ele ON ele.c_element_id = amf.c_element_id
   LEFT JOIN adempiere.c_elementvalue elv1 ON ele.c_element_id = elv1.c_element_id AND amf.accountfrom_id = elv1.c_elementvalue_id
   LEFT JOIN adempiere.c_elementvalue elv2 ON ele.c_element_id = elv2.c_element_id AND amf.accountto_id = elv2.c_elementvalue_id
   LEFT JOIN adempiere.c_elementvalue elv0 ON elv0.ad_client_id = amf.ad_client_id AND elv0.value::text >= elv1.value::text AND elv0.value::text <= elv2.value::text AND elv0.issummary = 'N'::bpchar
  ORDER BY amf.amf_acctbaldetail_id, elv0.value;
",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6110,SQL,,,,,,,,,Postgres,"
ALTER TABLE adempiere.amf_accounts_v
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6200,SQL,,,,,,,,,Postgres,"-- View: adempiere.amf_accounts_detail_v

-- DROP VIEW IF EXISTS adempiere.amf_accounts_detail_v;

CREATE OR REPLACE VIEW adempiere.amf_accounts_detail_v AS 
 SELECT fas.fact_acct_id AS amf_accounts_detail_v_id, 
 amf.c_elementvalue_id + 100::numeric * per.c_period_id + 10000::numeric * per.periodno + 1000::numeric * amf.amf_acctbaldetail_id AS amf_accounts_balance_v_id, 
 amf.amf_acctbaldetail_id, 
 amf.amf_accounts_v_id, 
 amf.ad_client_id, amf.ad_org_id, amf.created, amf.createdby, amf.updated, amf.updatedby, amf.isactive, amf.ref_org_id, 
 amf.periodfrom_id, 
 amf.periodto_id, 
 amf.acctvalue, 
 amf.acctname, 
 amf.acctdescription, 
 amf.acctname2, 
 amf.acctsign, 
 amf.acctisactive, 
 fas.c_acctschema_id, fas.account_id AS fasaccount, fas.datetrx, fas.dateacct, fas.c_period_id AS fasperiod, 
 fas.ad_table_id, fas.record_id, fas.gl_category_id, fas.gl_budget_id, fas.c_tax_id, fas.m_locator_id, fas.postingtype, 
 fas.c_currency_id, fas.amtsourcedr, fas.amtsourcecr, fas.amtacctdr, fas.amtacctcr, fas.c_uom_id, fas.qty, fas.m_product_id, fas.c_bpartner_id, fas.ad_orgtrx_id, fas.c_locfrom_id, fas.c_locto_id, fas.c_salesregion_id, fas.c_project_id, fas.c_campaign_id, fas.c_activity_id, fas.user1_id, fas.user2_id, fas.description, fas.a_asset_id, fas.c_subacct_id, fas.c_projectphase_id, fas.c_projecttask_id, per.c_period_id AS perperiod, per.isactive AS perisactive, per.name AS pername, per.startdate, per.enddate, per1.startdate AS perstartdate, per2.enddate AS perenddate
   FROM adempiere.fact_acct fas
   LEFT JOIN adempiere.amf_accounts_v amf ON fas.account_id = amf.c_elementvalue_id
   LEFT JOIN adempiere.c_period per1 ON amf.periodfrom_id = per1.c_period_id
   LEFT JOIN adempiere.c_period per2 ON amf.periodto_id = per2.c_period_id
   LEFT JOIN adempiere.c_period per ON per.ad_client_id = amf.ad_client_id AND per.c_period_id = fas.c_period_id
  WHERE fas.dateacct >= per1.startdate AND fas.dateacct <= per2.enddate
  ORDER BY amf.acctvalue, fas.dateacct;

",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6210,SQL,,,,,,,,,Postgres,"
ALTER TABLE adempiere.amf_accounts_detail_v
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6300,SQL,,,,,,,,,Postgres,"-- View: adempiere.amf_accounts_balance_v

-- DROP VIEW if EXISTS adempiere.amf_accounts_balance_v;

CREATE OR REPLACE VIEW adempiere.amf_accounts_balance_v AS 
 SELECT 
 elv0.c_elementvalue_id + 100::numeric * per.c_period_id + 10000::numeric * per.periodno + 1000::numeric * amf.amf_acctbaldetail_id AS amf_accounts_balance_v_id, 
 amf.amf_acctbaldetail_id, 
 elv0.c_elementvalue_id + 1000::numeric * amf.amf_acctbaldetail_id AS amf_accounts_v_id, 
 amf.ad_client_id, amf.ad_org_id, amf.created, amf.createdby, amf.updated, amf.updatedby, amf.isactive, amf.ref_org_id, 
 amf.periodfrom_id, 
 amf.periodto_id, 
 amf.accountfrom_id, elv1.value AS accountfrom, 
 amf.accountto_id, elv2.value AS accountto, 
 elv0.c_elementvalue_id, elv0.value AS balvalue, elv0.name AS balname, 
 COALESCE(elv0.description, ''::character varying) AS baldescription, 
 COALESCE(elv0.name2, ''::bpchar) AS balname2, 
 elv0.accountsign AS acctsign, 
 elv0.accounttype AS accttype, 
 elv0.isactive AS acctisactive, 
 per.c_period_id, 
 per.isactive AS perisactive, 
 per.name AS pername, 
 per.startdate, per.enddate, 
 adempiere.amf_acctdate0prevbalance(amf.ad_client_id, amf.ref_org_id, elv0.c_elementvalue_id, per.startdate) AS amf_acctper0prevbalance, 
 adempiere.amf_acctdate1deb(amf.ad_client_id, amf.ref_org_id, elv0.c_elementvalue_id, per.startdate, per.enddate) AS amf_acctper1deb, 
 adempiere.amf_acctdate2cre(amf.ad_client_id, amf.ref_org_id, elv0.c_elementvalue_id, per.startdate, per.enddate) AS amf_acctper2cre, 
 adempiere.amf_acctdate3balance(amf.ad_client_id, amf.ref_org_id, elv0.c_elementvalue_id, per.startdate, per.enddate) AS amf_acctper3balance, 
 adempiere.amf_acctdate4currentbalance(amf.ad_client_id, amf.ref_org_id, elv0.c_elementvalue_id, per.startdate, per.enddate) AS amf_acctper4currentbalance
   FROM adempiere.amf_acctbaldetail amf
   LEFT JOIN adempiere.c_element ele ON ele.c_element_id = amf.c_element_id
   LEFT JOIN adempiere.c_elementvalue elv1 ON ele.c_element_id = elv1.c_element_id AND amf.accountfrom_id = elv1.c_elementvalue_id
   LEFT JOIN adempiere.c_elementvalue elv2 ON ele.c_element_id = elv2.c_element_id AND amf.accountto_id = elv2.c_elementvalue_id
   LEFT JOIN adempiere.c_elementvalue elv0 ON elv0.ad_client_id = amf.ad_client_id AND elv0.value::text >= elv1.value::text AND elv0.value::text <= elv2.value::text AND elv0.issummary = 'N'::bpchar
   LEFT JOIN adempiere.c_period per1 ON amf.periodfrom_id = per1.c_period_id
   LEFT JOIN adempiere.c_period per2 ON amf.periodto_id = per2.c_period_id
   LEFT JOIN adempiere.c_period per ON per.ad_client_id = amf.ad_client_id AND per.startdate >= per1.startdate AND per.enddate <= per2.enddate
  ORDER BY elv0.value, per.startdate;


",,,,,,,,System Administrator,,,,,,,,,,Product Info
*,AMERPSOFT Financial,6310,SQL,,,,,,,,,Postgres,"ALTER TABLE adempiere.amf_accounts_balance_v
  OWNER TO adempiere;",,,,,,,,System Administrator,,,,,,,,,,Product Info
